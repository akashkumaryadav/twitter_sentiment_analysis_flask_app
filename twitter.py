# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UroNGmc-GkGHaAA6IiDpW3w03DpXcPTa
"""


import tweepy
import os
from textblob import TextBlob
from wordcloud import WordCloud
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
from utils import cleanTxt, getAnalysis, getPolarity, getSubjectivity
plt.style.use('fivethirtyeight')
consumerKey = os.environ.get("consumerKey")
consumerSecret = os.environ.get("consumerSecret")
accessToken = os.environ.get("acceesToken")
accessTokenSecret = os.environ.get("accessToenSecret")

authenticate = tweepy.OAuthHandler(consumerKey, consumerSecret)
authenticate.set_access_token(accessToken, accessTokenSecret)
api = tweepy.API(authenticate, wait_on_rate_limit=True)


def positive_tweets(sortedDF):
    """print all the positve tweets"""
    j = 1
    positive_tweets_list = []
    for i in range(0, sortedDF.shape[0]):
        if (sortedDF['Analysis'][i] == 'Positive'):
            positive_tweets_list.append(sortedDF['Tweets'][i])
            j = j+1
    return positive_tweets_list


def negative_tweets(sortedDF):
    """print the negetive tweets:"""
    j = 1
    negative_tweets_list = []

    for i in range(0, sortedDF.shape[0]):
        if (sortedDF['Analysis'][i] == 'Negetive'):
            negative_tweets_list.append(sortedDF['Tweets'][i])
            j = j+1
    return negative_tweets_list


# 1 construct method to fetch the user
def post_dataframe(username):
    posts = api.user_timeline(screen_name=username,
                              count=20, lang="en", tweet_mode="extended")
    df = pd.DataFrame([tweet.full_text for tweet in posts], columns=['Tweets'])
    return df


# 2 method for analysing the dataframe
def do_analysis(df):
    df['Tweets'] = df['Tweets'].apply(cleanTxt)
    df['Subjectivity'] = df['Tweets'].apply(getSubjectivity)
    df['Polarity'] = df['Tweets'].apply(getPolarity)
    df['Analysis'] = df['Polarity'].apply(getAnalysis)
    return df


# 3 fetching all negative and postive tweets
def all_analyised_tweets(df):
    df = do_analysis(df)
    sortedDF = df.sort_values(by=['Polarity'])
    return positive_tweets(sortedDF), negative_tweets(sortedDF)


# df = do_analysis(post_dataframe("akash_udaky"))


# Plot the polarity and subjectivity

def polarity_subjectivity(df, username):
    plt.figure(figsize=(8, 6))
    for i in range(0, df.shape[0]):
        plt.scatter(df['Polarity'][i], df['Subjectivity'][i], color='Blue')
    plt.title('Sentiment Analysis')
    plt.xlabel('Polarity')
    plt.ylabel('Subjectivity')
    imagepath = "./static/"+username + "_01"
    plt.savefig(imagepath)
    imagepath = imagepath + ".png"
    return imagepath

# # Get the percent of positive tweets

# ptweets = df[df.Analysis == 'Positive']
# ptweets = ptweets['Tweets']

# b = round((ptweets.shape[0] / df.shape[0])*100, 1)
# print(b)

# # Get the percent of negetive tweets

# ntweets = df[df.Analysis == 'Negetive']
# ntweets = ntweets['Tweets']

# a = round((ntweets.shape[0] / df.shape[0])*100, 1)
# print(a)

# df['Analysis'].value_counts()

# plt.title('Sentiment Analysis')
# plt.xlabel('Sentiment')
# plt.ylabel('Counts')
# df['Analysis'].value_counts().plot(kind='bar')
# plt.show()


# Word Cloud
def worldCloud(df, username):
    allWords = ' '.join([twts for twts in df['Tweets']])
    wordCloud = WordCloud(width=500, height=300, random_state=21,
                          max_font_size=119).generate(allWords)

    plt.imshow(wordCloud, interpolation="bilinear")
    plt.axis('off')
    imagepath = "./static/" + username + "_worldcloud"
    plt.savefig(imagepath)
    imagepath = imagepath + ".png"
    return imagepath
